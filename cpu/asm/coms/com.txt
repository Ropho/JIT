push 0
pop [0]
push 1
pop [1]
push 1
pop [2]
push 3
pop bx
call main
end
main:
in
pop [0]
If_begin0:
push [0]
push 2
jb If_end0
push 0
push bx
add
pop bx
call func
push bx
push 0
sub
pop bx
If_end0:
push [2]
out
ret
func:
push bx
push 0
add
pop cx
push [cx]
push [0]
push 1
sub
pop [0]
push [2]
push bx
push 1
add
pop cx
pop [cx]
push [2]
push [1]
add
pop [2]
push bx
push 1
add
pop cx
push [cx]
pop [1]
If_begin1:
push [0]
push 3
jne If_end1
ret
If_end1:
push 2
push bx
add
pop bx
call func
push bx
push 2
sub
pop bx
ret